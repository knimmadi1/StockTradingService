package com.intuit.test.StockTrading;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import com.intuit.test.StockTrading.Database.AnalyzerDB;
import com.intuit.test.StockTrading.ModelClasses.Stock;
import com.intuit.test.StockTrading.ModelClasses.userQuery;

@Path("/query")
public class SubmitQuery {
	
	public SubmitQuery()
	{
		PriorityBlockingQueue<userQuery> queryQueueq = new PriorityBlockingQueue<userQuery>();
		
		ArrayBlockingQueue<userQuery> orderQueue = new ArrayBlockingQueue<userQuery>(100000);
		InvestmentAnalyzerService investmentAnalyzerService = new InvestmentAnalyzerService(queryQueueq,orderQueue);
		
		OrderProcessService orderProcessService= new OrderProcessService(orderQueue);
		
		new Thread(investmentAnalyzerService).start();
		new Thread(orderProcessService).start();
	}
	
	
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public List<Stock> getStocksList()
	{
		
		return AnalyzerDB.getInstance().getStocks();
	}
	
	
	@GET
	@Path("/rating")
	@Produces(MediaType.APPLICATION_JSON)
	public Map<Stock, Integer> getRating()
	{
		
		return AnalyzerDB.getInstance().getStocksRating();
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public userQuery postOrder(userQuery query){
		System.out.println(query.getUserId());
		System.out.println(query.getStockId());
		
		//check if user has given valid stock Id or not,map is  better
	//	AnalyzerDB.getInstance().stocks
		
		//rating table
		new Stock(query.getUserId(),query.getPrice());
		AnalyzerDB.getInstance().getStocksRating().put(new Stock(query.getUserId(),query.getPrice()), 10);
		return query;
	}
	
	
	

}
