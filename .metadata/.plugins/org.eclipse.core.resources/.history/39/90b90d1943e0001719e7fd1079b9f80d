package com.intuit.test.StockTrading;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;



public class QueryService {
	
	private final PriorityBlockingQueue<UserQuery> queryQueue = new PriorityBlockingQueue<UserQuery>();
	private final ArrayBlockingQueue<UserQuery> orderQueue = new ArrayBlockingQueue<UserQuery>(1000000)  ;
	
	public QueryService()
	{
		InvestmentAnalyzerService InvestmentAnalyzerService = new InvestmentAnalyzerService(queryQueue,orderQueue);
		new Thread(InvestmentAnalyzerService).start();
	}
	
	
	public PriorityBlockingQueue<UserQuery> getQueryQueue() {
		return queryQueue;
	}
	public ArrayBlockingQueue<UserQuery> getOrderQueue() {
		return orderQueue;
	}
	
	public void processQuery(UserQuery query) throws StockNotFoundException
	{
		if(AnalyzerDB.getInstance().stockIdExists(query.getStockId()))
		{
			queryQueue.put(query);
		
		}
		else
		{
			throw new StockNotFoundException("Stock with Stock Id "+query.getStockId()+ " does not exist");
		}
	}

}
